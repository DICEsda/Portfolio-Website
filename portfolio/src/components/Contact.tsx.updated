import { useRef, useState } from 'react';
import { m, AnimatePresence } from 'framer-motion';
import { usePageActive } from '../hooks/usePageActive';

const Contact = () => {
  const form = useRef<HTMLFormElement>(null);
  const [status, setStatus] = useState<'idle' | 'sending' | 'success' | 'error'>('idle');
  const [statusMessage, setStatusMessage] = useState('');
  const [botField, setBotField] = useState('');
  const isActive = usePageActive('contact');
  const [copied, setCopied] = useState<string | null>(null);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    show: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.4, ease: [0.22, 1, 0.36, 1] }
    }
  };

  const sendEmail = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!form.current) return;

    // Form validation
    const data = new FormData(form.current);
    const name = String(data.get('name') || '').trim();
    const email = String(data.get('email') || '').trim();
    const message = String(data.get('message') || '').trim();
    
    const newErrors: Record<string, string> = {};
    if (!name) newErrors.name = 'Please enter your name.';
    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      newErrors.email = 'Please enter a valid email.';
    }
    if (!message) newErrors.message = 'Please write a message.';
    
    setErrors(newErrors);
    if (Object.keys(newErrors).length > 0) {
      setStatus('error');
      setStatusMessage('Please fix the errors and try again.');
      return;
    }

    // Honeypot check
    if (botField.trim().length > 0) {
      setStatus('success');
      setStatusMessage('Message sent successfully!');
      form.current?.reset();
      return;
    }

    setStatus('sending');
    setStatusMessage('Sending...');

    try {
      const { default: emailjs } = await import('@emailjs/browser');
      await emailjs.sendForm('service_zcxdb79', 'template_f1ovonq', form.current, {
        publicKey: 'K-s_xFAcbcC3jPeW2',
      });
      setStatus('success');
      setStatusMessage('Message sent successfully!');
      form.current?.reset();
      setErrors({});
    } catch (error: any) {
      setStatus('error');
      setStatusMessage('Failed to send message. Please try again.');
      console.log('FAILED...', error?.text || error);
    }
  };

  const copyToClipboard = async (text: string, type: 'phone' | 'email') => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(type);
      setTimeout(() => setCopied(null), 1500);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <section id="contact" className="h-screen flex items-center justify-center py-0">
      <div className="container mx-auto px-4 sm:px-6 md:px-8 lg:px-12 max-w-7xl">
        <m.div
          className="max-w-4xl mx-auto"
          variants={containerVariants}
          initial="hidden"
          animate={isActive ? 'show' : 'hidden'}
        >
          {/* Header */}
          <m.div variants={itemVariants} className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-light mb-6">
              Get In Touch
            </h2>
            <p className="text-tertiary text-lg leading-relaxed max-w-2xl mx-auto">
              Open to opportunities and collaborations. Have a question or just want to say hi?
              I'll get back to you as soon as I can.
            </p>
          </m.div>

          <div className="grid lg:grid-cols-3 gap-10">
            {/* Contact Form */}
            <m.div variants={itemVariants} className="lg:col-span-2">
              <div className="bg-card p-8 md:p-10 rounded-xl shadow-xl border border-secondary/20">
                <form ref={form} onSubmit={sendEmail} className="space-y-8">
                  {/* Honeypot field */}
                  <div className="hidden">
                    <label htmlFor="website">Website</label>
                    <input
                      id="website"
                      name="website"
                      autoComplete="off"
                      value={botField}
                      onChange={(e) => setBotField(e.target.value)}
                    />
                  </div>

                  {/* Name and Email Row */}
                  <div className="grid md:grid-cols-2 gap-8">
                    <div>
                      <label htmlFor="name" className="block text-light text-sm font-medium mb-3">
                        Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        name="name"
                        className={`w-full px-4 py-4 bg-primary/50 border rounded-lg focus:outline-none focus:border-secondary text-light transition-all duration-200 ${
                          errors.name ? 'border-red-500' : 'border-tertiary/30'
                        }`}
                        required
                      />
                      <AnimatePresence>
                        {errors.name && (
                          <m.p
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: -10 }}
                            className="mt-3 text-sm text-red-500"
                          >
                            {errors.name}
                          </m.p>
                        )}
                      </AnimatePresence>
                    </div>

                    <div>
                      <label htmlFor="email" className="block text-light text-sm font-medium mb-3">
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className={`w-full px-4 py-4 bg-primary/50 border rounded-lg focus:outline-none focus:border-secondary text-light transition-all duration-200 ${
                          errors.email ? 'border-red-500' : 'border-tertiary/30'
                        }`}
                        required
                      />
                      <AnimatePresence>
                        {errors.email && (
                          <m.p
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: -10 }}
                            className="mt-3 text-sm text-red-500"
                          >
                            {errors.email}
                          </m.p>
                        )}
                      </AnimatePresence>
                    </div>
                  </div>

                  {/* Company and Phone Row */}
                  <div className="grid md:grid-cols-2 gap-8">
                    <div>
                      <label htmlFor="company" className="block text-light text-sm font-medium mb-3">
                        Company <span className="text-tertiary">(Optional)</span>
                      </label>
                      <input
                        type="text"
                        id="company"
                        name="company"
                        className="w-full px-4 py-4 bg-primary/50 border border-tertiary/30 rounded-lg focus:outline-none focus:border-secondary text-light transition-all duration-200"
                      />
                    </div>

                    <div>
                      <label htmlFor="phone" className="block text-light text-sm font-medium mb-3">
                        Phone <span className="text-tertiary">(Optional)</span>
                      </label>
                      <input
                        type="tel"
                        id="phone"
                        name="phone"
                        className="w-full px-4 py-4 bg-primary/50 border border-tertiary/30 rounded-lg focus:outline-none focus:border-secondary text-light transition-all duration-200"
                      />
                    </div>
                  </div>

                  {/* Message */}
                  <div>
                    <label htmlFor="message" className="block text-light text-sm font-medium mb-3">
                      Message
                    </label>
                    <textarea
                      id="message"
                      name="message"
                      rows={6}
                      className={`w-full px-4 py-4 bg-primary/50 border rounded-lg focus:outline-none focus:border-secondary text-light transition-all duration-200 resize-none ${
                        errors.message ? 'border-red-500' : 'border-tertiary/30'
                      }`}
                      required
                    />
                    <AnimatePresence>
                      {errors.message && (
                        <m.p
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          className="mt-3 text-sm text-red-500"
                        >
                          {errors.message}
                        </m.p>
                      )}
                    </AnimatePresence>
                  </div>

                  {/* Submit Button and Status */}
                  <div className="flex flex-col items-center space-y-6 pt-4">
                    <m.button
                      type="submit"
                      disabled={status === 'sending'}
                      className="bg-secondary text-white px-8 py-4 rounded-lg font-medium hover:bg-secondary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-secondary/50"
                      whileHover={status !== 'sending' ? { scale: 1.02 } : {}}
                      whileTap={status !== 'sending' ? { scale: 0.98 } : {}}
                    >
                      {status === 'sending' ? 'Sending...' : 'Send Message'}
                    </m.button>

                    {/* Status Messages */}
                    <AnimatePresence>
                      {status === 'success' && (
                        <m.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: 10 }}
                          className="flex items-center space-x-2 text-green-500"
                        >
                          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                          <span>Message sent successfully!</span>
                        </m.div>
                      )}
                      {status === 'error' && (
                        <m.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: 10 }}
                          className="flex items-center space-x-2 text-red-500"
                        >
                          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                          </svg>
                          <span>{statusMessage}</span>
                        </m.div>
                      )}
                    </AnimatePresence>
                  </div>
                </form>
              </div>
            </m.div>

            {/* Contact Info Sidebar */}
            <m.div variants={itemVariants} className="lg:col-span-1">
              <div className="bg-card p-8 rounded-xl shadow-xl border border-secondary/20 h-fit">
                <h3 className="text-xl font-semibold text-light mb-8">Contact Information</h3>
                
                <div className="space-y-6">
                  {/* Phone */}
                  <div className="group">
                    <p className="text-sm text-tertiary mb-3">Phone</p>
                    <button
                      onClick={() => copyToClipboard('+4552560027', 'phone')}
                      className="flex items-center space-x-3 w-full p-4 bg-primary/30 rounded-lg hover:bg-primary/50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-secondary/50"
                    >
                      <svg className="w-5 h-5 text-secondary" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                      </svg>
                      <span className="text-light">+45 52560027</span>
                      <AnimatePresence>
                        {copied === 'phone' && (
                          <m.span
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            className="ml-auto text-xs text-secondary bg-secondary/20 px-2 py-1 rounded"
                          >
                            Copied!
                          </m.span>
                        )}
                      </AnimatePresence>
                    </button>
                  </div>

                  {/* Email */}
                  <div className="group">
                    <p className="text-sm text-tertiary mb-3">Email</p>
                    <button
                      onClick={() => copyToClipboard('Yahya24680@gmail.com', 'email')}
                      className="flex items-center space-x-3 w-full p-4 bg-primary/30 rounded-lg hover:bg-primary/50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-secondary/50"
                    >
                      <svg className="w-5 h-5 text-secondary" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                        <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                      </svg>
                      <span className="text-light">Yahya24680@gmail.com</span>
                      <AnimatePresence>
                        {copied === 'email' && (
                          <m.span
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            className="ml-auto text-xs text-secondary bg-secondary/20 px-2 py-1 rounded"
                          >
                            Copied!
                          </m.span>
                        )}
                      </AnimatePresence>
                    </button>
                  </div>

                  {/* Location */}
                  <div>
                    <p className="text-sm text-tertiary mb-3">Location</p>
                    <div className="flex items-center space-x-3 p-4 bg-primary/30 rounded-lg">
                      <svg className="w-5 h-5 text-secondary" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
                      </svg>
                      <span className="text-light">Denmark</span>
                    </div>
                  </div>
                </div>

                <div className="mt-10 pt-8 border-t border-tertiary/20">
                  <p className="text-xs text-tertiary text-center">
                    Click phone or email to copy to clipboard
                  </p>
                </div>
              </div>
            </m.div>
          </div>
        </m.div>
      </div>
    </section>
  );
};

export default Contact;
